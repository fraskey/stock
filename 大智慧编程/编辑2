{寻找距今N1和N2（N1<N2）周期之间是否存在确定的顶底，以M个标准序列为准}
{返回值flag为0时表示N1到N2周期间不存在顶底分型，+K表示顶分型，K值为顶分型到当前周期的距离；-K为底分型，K值为底分型到当前周期的距离}
{按照禅式理论比较最高最低点的底分型，且考虑到底点K线合并的情况}

INPUT:N1(0,0,5000,1),N2(30,0,5000,1),M(5,1,100,1);

{第一步：寻找N1到N2期间的最大值和最小值，顶分和底分型必以最大和最小值为顶底点}
min_count:=100000;
max_count:=0;
min_pos:=N1;
max_pos:=N1;
FOR I=N1 TO N2 DO BEGIN
	IF(REF(HIGH,I)>max_count) THEN BEGIN
		max_count:=REF(HIGH,I);
		max_pos:=I;
	END

	IF(REF(LOW,I)<min_count) THEN BEGIN
		min_count:=REF(LOW,I);
		min_pos:=I;
	END	

END

{第二步：对于存在最大值点时，确认是否为顶分型的最高点，判断方法是看其左右两边是否分别形成了M1长度的标准下降序列}
ding_flg_ok:=0;
IF((max_pos-N1)>=(M-1) AND (N2-max_pos)>=(M-1)) THEN BEGIN
	{对左侧运算}
	tem_high:=REF(HIGH,max_pos);
	tem_low:=REF(LOW,max_pos);
	fengxing_cnt:=0;
	FOR I=max_pos TO N2 DO BEGIN
		IF(REF(HIGH,I)<tem_high AND REF(LOW,I)<tem_low) THEN BEGIN
			fengxing_cnt:=fengxing_cnt+1;
		END
		tem_high:= MIN(tem_high,REF(HIGH,I));		
		tem_low:= MIN(tem_low,REF(LOW,I));
		{序列已经形成，没有必要再找下去}
		IF(fengxing_cnt>=M-1) THEN BEGIN		
			BREAK;
		END	
	END
	{左侧序列形成的情况下，可对右侧进行计算}		
	IF(fengxing_cnt>=M-1) THEN BEGIN	
		{对右侧运算}
		tem_high:=REF(HIGH,max_pos);
		tem_low:=REF(LOW,max_pos);
		fengxing_cnt:=0;
		
		FOR I=N1 TO max_pos DO BEGIN
			IF(REF(HIGH,I+(max_pos-N1))<tem_high AND REF(LOW,I+(max_pos-N1))<tem_low) THEN BEGIN
				fengxing_cnt:=fengxing_cnt+1;
			END
			tem_high:= MIN(tem_high,REF(HIGH,I+(max_pos-N1)));		
			tem_low:= MIN(tem_low,REF(LOW,I+(max_pos-N1)));	
		
			{序列已经形成，没有必要再找下去}
			IF(fengxing_cnt>=M-1) THEN BEGIN		
				BREAK;
			END		
		END

		{确认该点为顶分型}
		IF(fengxing_cnt>=M-1) THEN BEGIN		
			ding_flg_ok:=1;
		END	
	END

END

{第三步：对于存在最小值点时，确认该点是否为底分型的最低点，判断方法是看其左右两边是否分别形成了M1长度的标准上升序列}
di_flg_ok:=0;
IF((min_pos-N1)>=(M-1) AND (N2-min_pos)>=(M-1)) THEN BEGIN
	{对左侧运算}
	tem_high:=REF(HIGH,min_pos);
	tem_low:=REF(LOW,min_pos);
	fengxing_cnt:=0;
	FOR I=min_pos TO N2 DO BEGIN
		IF(REF(HIGH,I)>tem_high AND REF(LOW,I)>tem_low) THEN BEGIN
			fengxing_cnt:=fengxing_cnt+1;
		END
		tem_high:= MAX(tem_high,REF(HIGH,I));		
		tem_low:= MAX(tem_low,REF(LOW,I));
		{序列已经形成，没有必要再找下去}
		IF(fengxing_cnt>=M-1) THEN BEGIN		
			BREAK;
		END	
	END
	
	{左侧序列形成的情况下，可对右侧进行计算}		
	IF(fengxing_cnt>=M-1) THEN BEGIN	
		{对右侧运算}
		tem_high:=REF(HIGH,min_pos);
		tem_low:=REF(LOW,min_pos);
		fengxing_cnt:=0;
		
		FOR I=N1 TO min_pos DO BEGIN
			IF(REF(HIGH,I+(min_pos-N1))>tem_high AND REF(LOW,I+(min_pos-N1))>tem_low) THEN BEGIN
				fengxing_cnt:=fengxing_cnt+1;
			END
			tem_high:= MIN(tem_high,REF(HIGH,I+(min_pos-N1)));		
			tem_low:= MIN(tem_low,REF(LOW,I+(min_pos-N1)));	
			
			{序列已经形成，没有必要再找下去}
			IF(fengxing_cnt>=M-1) THEN BEGIN		
				BREAK;
			END		
		END

		{确认该点为底分型}
		IF(fengxing_cnt>=M-1) THEN BEGIN		
			di_flg_ok:=1;
		END	
	END
END

{第四步：返回是否存在顶分型和底分型以及其值的大小，当顶分和底分型都存在时返回离当前周期最近的那个}
tem_flag:=0;
IF(ding_flg_ok=1 AND di_flg_ok=0) THEN BEGIN
	tem_flag := max_pos;
END
IF(ding_flg_ok=0 AND di_flg_ok=1) THEN BEGIN
	tem_flag := min_pos * (-1);
END

IF(ding_flg_ok=1 AND di_flg_ok=1) THEN BEGIN
	
	IF(max_pos < min_pos) THEN BEGIN
		tem_flag := max_pos;
	END
	ELSE  BEGIN
		tem_flag := min_pos * (-1);
	END
END

{返回值flag为0时表示N1到N2周期间不存在顶底分型，+K表示顶分型，K值为顶分型到当前周期的距离；-K为底分型，K值为底分型到当前周期的距离}
flag:tem_flag;